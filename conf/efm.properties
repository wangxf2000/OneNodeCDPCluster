#
# Apache NiFi - MiNiFi
# Copyright 2014-2018 The Apache Software Foundation
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Web Server Properties
#  address: the hostname or ip address of the interface to bind to; to bind to all, use 0.0.0.0
efm.server.address=YourHostname
efm.server.port=10080
efm.server.servlet.contextPath=/efm

# Cluster Properties
#   address: the address (host or host:port) to bind to for node-to-node cluster communication
#   memberAddress: the address (host or host:port) to advertise to other cluster members,
#     - this is option and only needs to be specified if it is different from the bind `address` value
#   members: comma-separated list all cluster nodes, including this node
#     - use the `memberAddress` value in this list if it is specified, otherwise use the `address` value
#     - the list must be identical on all nodes in the cluster
#     - format of node address is one of: hostname, IP, hostname:port, IP:port
#     - port is optional (5701 the default port)
efm.cluster.enabled=false
#efm.cluster.address=localhost:5701
#efm.cluster.memberAddress=
#efm.cluster.members=host1:5701,host2:5701,host3:5701

# Cluster TLS/SSL Tunnel Properties
#  enabled: enable secure communication within the cluster via a stunnel proxy
#  command: the command or path to executable for stunnel, which must be installed, e.g., /usr/bin/stunnel
#  logLevel: the level of stunnel debug output: emerg|alert|crit|err|warning|notice|info|debug
#  logFile: (optional) if specified, the file to use for stunnel logs. if not specified, output is to EFM App Log
#  caFile: The file containing Certificate Authority certificates. Must be PEM format.
#  cert: The file containing this cluster node's public certificate. Must be PEM format.
#  key: The file containing this cluster node's private key. Must be PEM format. Can be encrypted or unencrypted
#  keyPassword: (optional) If the key file is encrypted with a password, the password to decrypt the key file.
#  proxyServerPort: the port that will receive the TLS traffic and redirect to Hazelcast (default 10090)
#  proxyClientPortStart: starting with the given port, the ports used to proxy communication with other cluster members
#      over the secure TLS tunnel (default 10091). The number of ports used is one fewer than the number of cluster members.
#  For additional Stunnel configuration options, see https://www.stunnel.org/static/stunnel.html
#      global options, service level options, or client-/server-specific server options can be specified as
#      key-value pairs with the appropriate prefix efm.cluster.stunnel.[global|service|clientService|serverService].*
efm.cluster.stunnel.enabled=false
efm.cluster.stunnel.command=stunnel
efm.cluster.stunnel.logLevel=warning
efm.cluster.stunnel.caFile=
efm.cluster.stunnel.cert=
efm.cluster.stunnel.key=
efm.cluster.stunnel.keyPassword=
efm.cluster.stunnel.proxyServerPort=10090
efm.cluster.stunnel.proxyClientPortStart=10091
#efm.cluster.stunnel.global.[option]=value
#efm.cluster.stunnel.service.[option]=value
#efm.cluster.stunnel.clientService.[option]=value
#efm.cluster.stunnel.serverService.[option]=value

# Web Server TLS Properties
efm.server.ssl.enabled=false
efm.server.ssl.keyStore=./conf/keystore.jks
efm.server.ssl.keyStoreType=jks
efm.server.ssl.keyStorePassword=
efm.server.ssl.keyPassword=
efm.server.ssl.trustStore=./conf/truststore.jks
efm.server.ssl.trustStoreType=jks
efm.server.ssl.trustStorePassword=
efm.server.ssl.clientAuth=WANT

# User Authentication Properties
# authentication via TLS mutual auth with client certificates
efm.security.user.certificate.enabled=true
# authentication via Knox SSO token passed in a cookie header
efm.security.user.knox.enabled=false
efm.security.user.knox.url=
efm.security.user.knox.publicKey=
efm.security.user.knox.cookieName=
efm.security.user.knox.audiences=
# authentication via generic reverse proxy with user passed in a header
efm.security.user.proxy.enabled=false
efm.security.user.proxy.headerName=x-webauth-user
#efm.security.user.proxy.ipWhitelist=
#efm.security.user.proxy.dnWhitelist[0]=

# NiFi Registry Properties
#  url: the base URL of a NiFi Registry instance
#  bucket: Only set one of bucketId OR bucketName
#  flowRefreshInterval: specify value and units (d=days, h=hours, m=minutes, s=seconds, ms=milliseconds)
efm.nifi.registry.enabled=true
efm.nifi.registry.url=http://YourHostname:18080
efm.nifi.registry.bucketId=
efm.nifi.registry.bucketName=IoT
efm.nifi.registry.flowRefreshInterval=60s

# Database Properties
#efm.db.url=jdbc:h2:./database/efm;AUTOCOMMIT=OFF;DB_CLOSE_ON_EXIT=FALSE;LOCK_MODE=3
#efm.db.driverClass=org.h2.Driver
#efm.db.username=efm
#efm.db.password=
#efm.db.maxConnections=50
#efm.db.sqlDebug=false
efm.db.url=jdbc:mysql://YourHostname:3306/efm
efm.db.driverClass=com.mysql.cj.jdbc.Driver
efm.db.username=efm
efm.db.password=cloudera
efm.db.maxConnections=5
efm.db.sqlDebug=false

# Heartbeat Retention Properties
# For maxAgeToKeep, specify value and units (d=days, h=hours, m=minutes, s=seconds, ms=milliseconds)
# Set to 0 to disable persisting events entirely
efm.heartbeat.maxAgeToKeep=0
efm.heartbeat.persistContent=false

# Event Retention Properties
# Specify value and units (d=days, h=hours, m=minutes, s=seconds, ms=milliseconds)
# Set to 0 to disable persisting events entirely
# Set no value to disable auto-cleanup (manual deletion only)
efm.event.cleanupInterval=30s
efm.event.maxAgeToKeep.debug=0m
efm.event.maxAgeToKeep.info=1h
efm.event.maxAgeToKeep.warn=1d
efm.event.maxAgeToKeep.error=7d

# Agent Class Flow Monitor Properties
# Specify value and units (d=days, h=hours, m=minutes, s=seconds, ms=milliseconds)
efm.agent-class-monitor.interval=15s

# Agent Monitoring Properties
# Specify value and units (d=days, h=hours, m=minutes, s=seconds, ms=milliseconds)
# Set to zero to disable threshold monitoring entirely
efm.monitor.maxHeartbeatInterval=5m
#efm.monitor.maxHeartbeatIntervalForClass.[your\ class\ here]=10m

# Operation Properties
efm.operation.monitoring.enabled=true
efm.operation.monitoring.inQueuedStateTimeout=0m
efm.operation.monitoring.inDeployedStateTimeout=5m
efm.operation.monitoring.inDeployedStateCheckFrequency=1m
efm.operation.monitoring.rollingBatchOperationsSize=100
efm.operation.monitoring.rollingBatchOperationsFrequency=10s

# Metrics Properties
# If not using Prometheus or Grafana, disable everything.
# For maximum visibility, enable everything.
# For maximum scalability, disable everything.
# For a good balance, recommend:
#   enable-tag.agentManifestId=false
#   enable-tag.agentId=false
management.metrics.efm.enabled=true
management.metrics.export.simple.enabled=false
management.metrics.export.prometheus.enabled=true
management.metrics.export.prometheus.descriptions=true
management.metrics.enable.efm.heartbeat=true
management.metrics.enable.efm.repo=true
management.metrics.efm.enable-tag.host=true
management.metrics.efm.enable-tag.protocol=false
management.metrics.efm.enable-tag.agentClass=true
management.metrics.efm.enable-tag.agentManifestId=true
management.metrics.efm.enable-tag.agentId=true
management.metrics.efm.max-tags.agentClass=20
management.metrics.efm.max-tags.agentManifestId=10
management.metrics.efm.max-tags.agentId=100

# External Metrics Dashboard Properties
#   base-url: optionally set a base url to use as the base for all other dashboard urls.
#               if blank, efm server base url is used (with proxy url rewriting rules as well)
#   url.*: url for a given dashboard type:
#            leave blank (or absent) do disable linking to that dashboard.
#            use relative url to inherit from base-url property.
#            use absolute url to override base-url for that dashboard type.
#            can use the following placeholders: {agentId}, {agentClass}
#efm.dashboard.base-url=http://localhost:3000
#efm.dashboard.url.agentclass=/d/efm-agent-class/?var-agentClass={agentClass}
#efm.dashboard.url.agent=/d/efm-agent/?var-agentId={agentId}

# EL Specification Properties
efm.el.specifications.dir=./specs

# Logging Properties
#  logging.level.{logger-name}={DEBUG|INFO|WARN|ERROR}
logging.level.com.cloudera.cem.efm=INFO
logging.level.com.hazelcast=WARN
logging.level.com.hazelcast.internal.cluster.ClusterService=INFO
logging.level.com.hazelcast.internal.nio.tcp.TcpIpConnection=ERROR
logging.level.com.hazelcast.internal.nio.tcp.TcpIpConnector=ERROR
#logging.path=
#logging.file=efm-app.log
#logging.file.max-size=10MB
